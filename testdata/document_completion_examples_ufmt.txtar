# Init phase
lsp initialize input/initialize.json
lsp initialized input/initialized.json
lsp workspace/didChangeConfiguration input/didChangeConfiguration.json
lsp textDocument/didOpen input/didOpen_x.json

lsp textDocument/completion input/completion.json
cmp output/completion.json expected/completion.json
-- x.gno --
package foo

func Hello() {
	ufmt.
}
-- input/initialize.json --
{
	"rootUri": "file://$WORK"
}
-- input/initialized.json --
{}
-- input/didChangeConfiguration.json --
{
	"settings": {
		"gno":              "$GOBIN/gno",
		"gopls":            "$GOBIN/gopls",
		"root":             "$GNOPATH",
		"precompileOnSave": true,
		"buildOnSave":      true
	}
}
-- input/didOpen_x.json --
{
	"textDocument": {
		"uri":"file://$WORK/x.gno",
		"text":"${FILE_x.gno}"
	}
}
-- input/completion.json --
{
	"textDocument": {
		"uri":"file://$WORK/x.gno"
	},
	"position": {
		"character": 6,
		"line": 3
	}
}
-- expected/completion.json --
[
  {
    "detail": "func Println(args ...interface{})",
    "documentation": "Println formats using the default formats for its operands and writes to standard output.\nPrintln writes the given arguments to standard output with spaces between arguments\nand a newline at the end.\n",
    "insertText": "Println",
    "kind": 3,
    "label": "Println"
  },
  {
    "detail": "func Sprintf(format string, args ...interface{}) string",
    "documentation": "Sprintf offers similar functionality to Go's fmt.Sprintf, or the sprintf\nequivalent available in many languages, including C/C++.\nThe number of args passed must exactly match the arguments consumed by the format.\nA limited number of formatting verbs and features are currently supported,\nhence the name ufmt (Âµfmt, micro-fmt).\n\nThe currently formatted verbs are the following:\n\n\t%s: places a string value directly.\n\t    If the value implements the interface interface{ String() string },\n\t    the String() method is called to retrieve the value. Same about Error()\n\t    string.\n\t%c: formats the character represented by Unicode code point\n\t%d: formats an integer value using package \"strconv\".\n\t    Currently supports only uint, uint64, int, int64.\n\t%t: formats a boolean value to \"true\" or \"false\".\n\t%%: outputs a literal %. Does not consume an argument.\n",
    "insertText": "Sprintf",
    "kind": 3,
    "label": "Sprintf"
  },
  {
    "detail": "func Errorf(format string, args ...interface{}) error",
    "documentation": "Errorf is a function that mirrors the functionality of fmt.Errorf.\n\nIt takes a format string and arguments to create a formatted string,\nthen sets this string as the 'msg' field of an errMsg struct and returns a pointer to this struct.\n\nThis function operates in a similar manner to Go's fmt.Errorf,\nproviding a way to create formatted error messages.\n\nThe currently formatted verbs are the following:\n\n\t%s: places a string value directly.\n\t    If the value implements the interface interface{ String() string },\n\t    the String() method is called to retrieve the value. Same for error.\n\t%c: formats the character represented by Unicode code point\n\t%d: formats an integer value using package \"strconv\".\n\t    Currently supports only uint, uint64, int, int64.\n\t%t: formats a boolean value to \"true\" or \"false\".\n\t%%: outputs a literal %. Does not consume an argument.\n",
    "insertText": "Errorf",
    "kind": 3,
    "label": "Errorf"
  }
]
